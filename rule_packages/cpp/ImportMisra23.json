{
  "MISRA-C++-2023": {
    "DIR-5-7-2": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Commented out code may become out of date leading to developer confusion.",
          "kind": "problem",
          "name": "Sections of code should not be \u201ccommented out\u201d",
          "precision": "very-high",
          "severity": "error",
          "short_name": "SectionsOfCodeShouldNotBeCommentedOut",
          "shared_implementation_short_name": "SectionsOfCodeShallNotBeCommentedOut",
          "tags": [
            "maintainability",
            "readability",
            "correctness"
          ]
        }
      ],
      "title": "Sections of code should not be \u201ccommented out\u201d"
    },
    "RULE-6-2-1": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "The one-definition rule specifies when there should be a single definition of an element and a violation of that rule leads to undefined behavior.",
          "kind": "problem",
          "name": "The one-definition rule shall not be violated",
          "precision": "very-high",
          "severity": "error",
          "short_name": "OneDefinitionRuleViolated",
          "shared_implementation_short_name": "OneDefinitionRuleViolation",
          "tags": [
            "correctness",
            "scope/system"
          ]
        }
      ],
      "title": "The one-definition rule shall not be violated"
    },
    "RULE-6-4-1": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Use of an identifier declared in an inner scope with an identical name to an identifier in an outer scope can lead to inadvertent errors if the incorrect identifier is modified.",
          "kind": "problem",
          "name": "A variable declared in an inner scope shall not hide a variable declared in an outer scope",
          "precision": "very-high",
          "severity": "error",
          "short_name": "VariableDeclaredInInnerScopeHidesOuterScope",
          "shared_implementation_short_name": "IdentifierHidden",
          "tags": [
            "readability",
            "maintainability",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "A variable declared in an inner scope shall not hide a variable declared in an outer scope"
    },
    "RULE-6-8-1": {
      "properties": {
        "enforcement": "undecidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Accessing an object before its lifetime can result in undefined behavior.",
          "kind": "problem",
          "name": "Access of uninitialized object",
          "precision": "high",
          "severity": "error",
          "shared_implementation_short_name": "ObjectAccessedBeforeLifetime",
          "short_name": "ObjectAccessedBeforeLifetimeMisra",
          "tags": [
            "correctness",
            "security"
          ]
        },
        {
          "description": "Accessing an object after its lifetime results in undefined behavior.",
          "kind": "problem",
          "name": "Access of object after lifetime (use-after-free)",
          "precision": "high",
          "severity": "error",
          "shared_implementation_short_name": "ObjectAccessedAfterLifetime",
          "short_name": "ObjectAccessedAfterLifetimeMisra",
          "tags": [
            "correctness",
            "security"
          ]
        }
      ],
      "title": "An object shall not be accessed outside of its lifetime"
    },
    "RULE-8-2-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference.",
          "kind": "problem",
          "name": "A cast shall not remove any const or volatile qualification from the type accessed via a pointer or",
          "precision": "very-high",
          "severity": "error",
          "short_name": "CastRemovesConstOrVolatileFromPointerOrReference",
          "shared_implementation_short_name": "RemoveConstOrVolatileQualification",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "A cast shall not remove any const or volatile qualification from the type accessed via a pointer or by reference"
    },
    "RULE-9-4-1": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "All if ... else if constructs shall be terminated with an else statement.",
          "kind": "problem",
          "name": "All if ... else if constructs shall be terminated with an else statement",
          "precision": "very-high",
          "severity": "error",
          "short_name": "IfElseIfEndCondition",
          "shared_implementation_short_name": "IfElseTerminationConstruct",
          "tags": [
            "readability",
            "maintainability",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "All if ... else if constructs shall be terminated with an else statement"
    },
    "RULE-9-6-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Jumping back to an earlier section in the code can lead to accidental iterations.",
          "kind": "problem",
          "name": "The goto statement shall jump to a label declared later in the function body",
          "precision": "very-high",
          "severity": "error",
          "short_name": "GotoShallJumpToLabelDeclaredLaterInTheFunction",
          "shared_implementation_short_name": "GotoStatementCondition",
          "tags": [
            "maintainability",
            "readability",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "The goto statement shall jump to a label declared later in the function body"
    },
    "RULE-9-6-4": {
      "properties": {
        "enforcement": "undecidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "A function with the [[noreturn]] attribute that returns leads to undefined behaviour.",
          "kind": "problem",
          "name": "A function declared with the [[noreturn]] attribute shall not return",
          "precision": "very-high",
          "severity": "error",
          "short_name": "FunctionDeclaredWithTheNoreturnAttributeReturn",
          "shared_implementation_short_name": "FunctionNoReturnAttributeCondition",
          "tags": [
            "correctness",
            "scope/system"
          ]
        }
      ],
      "title": "A function declared with the [[noreturn]] attribute shall not return"
    },
    "RULE-9-6-5": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "A function with non-void return type that does not exit via a return statement can result in undefined behaviour. An exception to this rule is exiting via exception handling.",
          "kind": "problem",
          "name": "A function with non-void return type shall return a value on all paths",
          "precision": "very-high",
          "severity": "error",
          "short_name": "NonVoidFunctionShallReturnAValueOnAllPaths",
          "shared_implementation_short_name": "NonVoidFunctionDoesNotReturn",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "A function with non-void return type shall return a value on all paths"
    },
    "RULE-11-3-2": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Declarations with more than two levels of pointer nesting can result in code that is difficult to read and understand.",
          "kind": "problem",
          "name": "The declaration of an object should contain no more than two levels of pointer indirection",
          "precision": "very-high",
          "severity": "error",
          "short_name": "DeclarationOfAnObjectIndirectionsLevel",
          "shared_implementation_short_name": "DoNotUseMoreThanTwoLevelsOfPointerIndirection",
          "tags": [
            "readability",
            "maintainability",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "The declaration of an object should contain no more than two levels of pointer indirection"
    },
    "RULE-18-3-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Handlers for a function-try-block of a constructor or destructor shall not refer to non-static members from their class or its bases.",
          "kind": "problem",
          "name": "Handlers for a function-try-block of a constructor or destructor shall not refer to non-static",
          "precision": "very-high",
          "severity": "error",
          "short_name": "HandlersReferToNonStaticMembersFromTheirClass",
          "shared_implementation_short_name": "DestroyedValueReferencedInDestructorCatchBlock",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "Handlers for a function-try-block of a constructor or destructor shall not refer to non-static members from their class or its bases"
    },
    "RULE-19-0-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Using anything other than other pre-processor directives or comments before an '#include' directive makes the code more difficult to read.",
          "kind": "problem",
          "name": "#include directives should only be preceded by preprocessor directives or comments",
          "precision": "very-high",
          "severity": "error",
          "short_name": "IncludeDirectivesPrecededByPreprocessorDirectives",
          "shared_implementation_short_name": "PreprocessorIncludesPreceded",
          "tags": [
            "readability",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "#include directives should only be preceded by preprocessor directives or comments"
    },
    "RULE-19-1-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation.",
          "kind": "problem",
          "name": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be",
          "precision": "very-high",
          "severity": "error",
          "short_name": "IdentifiersUsedInTheControllingExpressionOf",
          "shared_implementation_short_name": "UndefinedMacroIdentifiers",
          "tags": [
            "correctness",
            "readability",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be defined prior to evaluation"
    },
    "RULE-19-2-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "The ' or \" or \\ characters and the /* or // character sequences shall not occur in a header file name.",
          "kind": "problem",
          "name": "The ' or \" or \\ characters and the /* or // character sequences shall not occur in a header file",
          "precision": "very-high",
          "severity": "error",
          "short_name": "CharsThatShouldNotOccurInHeaderFileName",
          "shared_implementation_short_name": "PreprocessorIncludesForbiddenHeaderNames",
          "tags": [
            "scope/single-translation-unit",
            "correctness"
          ],
          "implementation_scope": {
            "description": "This query identifies the use of the ', \\, /*, // characters in header file names. The query is not able to detect the use of the \" character in header file names.",
            "items": []
          }
        }
      ],
      "title": "The ' or \" or \\ characters and the /* or // character sequences shall not occur in a header file name"
    },
    "RULE-19-3-1": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "The order of evaluation for the '#' and '##' operators may differ between compilers, which can cause unexpected behaviour.",
          "kind": "problem",
          "name": "The # and ## preprocessor operators should not be used",
          "precision": "very-high",
          "severity": "error",
          "short_name": "AndPreprocessorOperatorsShouldNotBeUsed",
          "shared_implementation_short_name": "HashOperatorsUsed",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "The # and ## preprocessor operators should not be used"
    },
    "RULE-19-3-5": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Arguments to a function-like macro shall not contain tokens that look like pre-processing directives or else behaviour after macro expansion is unpredictable.",
          "kind": "problem",
          "name": "Tokens that look like a preprocessing directive shall not occur within a macro argument",
          "precision": "very-high",
          "severity": "error",
          "short_name": "TokensThatLookLikeDirectivesInAMacroArgument",
          "shared_implementation_short_name": "PreprocessingDirectiveWithinMacroArgument",
          "tags": [
            "readability",
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "Tokens that look like a preprocessing directive shall not occur within a macro argument"
    },
    "RULE-21-6-5": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Do not delete pointers to incomplete classes to prevent undefined behavior.",
          "kind": "problem",
          "name": "A pointer to an incomplete class type shall not be deleted",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PointerToAnIncompleteClassTypeDeleted",
          "shared_implementation_short_name": "DeleteOfPointerToIncompleteClass",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "A pointer to an incomplete class type shall not be deleted"
    },
    "RULE-25-5-2": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "mandatory"
      },
      "queries": [
        {
          "description": "The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type.",
          "kind": "path-problem",
          "name": "The pointers returned by environment functions should be treated as const",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PointersReturnedByLocaleFunctionsMustBeUsedAsConst",
          "shared_implementation_short_name": "ConstLikeReturnValue",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "The pointers returned by the C++ Standard Library functions localeconv, getenv, setlocale or strerror must only be used as if they have pointer to const-qualified type"
    },
    "RULE-25-5-3": {
      "properties": {
        "enforcement": "undecidable",
        "obligation": "mandatory"
      },
      "queries": [
        {
          "description": "The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror may be invalid following a subsequent call to the same function.",
          "kind": "problem",
          "name": "The pointer returned by the Standard Library env functions is invalid",
          "precision": "very-high",
          "severity": "error",
          "short_name": "CallToSetlocaleInvalidatesOldPointersMisra",
          "shared_implementation_short_name": "InvalidatedEnvStringPointers",
          "tags": [
            "correctness",
            "scope/system"
          ]
        },
        {
          "description": "The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror may be invalid following a subsequent call to the same function.",
          "kind": "problem",
          "name": "The pointer returned by the Standard Library env functions is invalid warning",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "CallToSetlocaleInvalidatesOldPointersWarnMisra",
          "shared_implementation_short_name": "InvalidatedEnvStringPointersWarn",
          "tags": [
            "correctness",
            "scope/system"
          ]
        }
      ],
      "title": "The pointer returned by the C++ Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror must not be used following a subsequent call to the same function"
    },
    "RULE-28-6-3": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Moved-from object shall not be read-accessed.",
          "kind": "problem",
          "name": "An object shall not be used while in a potentially moved-from state",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ObjectUsedWhileInPotentiallyMovedFromState",
          "shared_implementation_short_name": "MovedFromObjectsUnspecifiedState",
          "tags": [
            "correctness",
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "An object shall not be used while in a potentially moved-from state"
    },
    "RULE-30-0-2": {
      "properties": {
        "enforcement": "undecidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call.",
          "kind": "problem",
          "name": "Reads and writes on the same file stream shall be separated by a positioning operation",
          "precision": "very-high",
          "severity": "error",
          "short_name": "ReadsAndWritesOnStreamNotSeparatedByPositioning",
          "shared_implementation_short_name": "IOFstreamMissingPositioning",
          "tags": [
            "correctness",
            "scope/system"
          ],
          "implementation_scope": {
            "description": "The rule is enforced in the context of a single function."
          }
        }
      ],
      "title": "Reads and writes on the same file stream shall be separated by a positioning operation"
    }
  }
}