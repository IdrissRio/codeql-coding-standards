/**
 * @id c/misra/generic-selection-not-from-macro-with-side-effects
 * @name RULE-23-2: A generic selection shall not contain side-effects if it is not expanded from a macro
 * @description A generic selection that is not expanded from a macro shall not contain potential
 *              side effects in the controlling expression.
 * @kind problem
 * @precision high
 * @problem.severity warning
 * @tags external/misra/id/rule-23-2
 *       maintainability
 *       external/misra/c/2012/amendment3
 *       external/misra/obligation/required
 */

import cpp
import codingstandards.c.misra
import codingstandards.c.Generic
import codingstandards.cpp.SideEffect
import codingstandards.cpp.sideeffect.DefaultEffects
import codingstandards.cpp.alertreporting.DeduplicateMacroResults

class GenericWithNonMacroSideEffect extends C11GenericExpr {
  SideEffect sideEffect;

  GenericWithNonMacroSideEffect() {
    not exists(MacroInvocation mi |
      mi.getAGeneratedElement() = getExpr() and
      mi.getMacro().(GenericMacro).hasControllingExprFromMacroParameter()
    ) and
    sideEffect = getASideEffect(getControllingExpr())
  }

  SideEffect getASideEffect() { result = sideEffect }
}

module GenericSideEffectConfig implements DeduplicateMacroConfigSig<GenericWithNonMacroSideEffect> {
  string describe(GenericWithNonMacroSideEffect e) {
    result = "side effect '" + e.getASideEffect() + "'"
  }
}

module GenericSideEffectReportConfig implements MacroReportConfigSig<GenericWithNonMacroSideEffect> {
  /* Create a message to describe this macro, with a string describing its `ResultElement`. */
  bindingset[description]
  string getMessageSameResultInAllExpansions(Macro m, string description) {
    result =
      "Generic selection macro " + m.getName() + " contains a " + description +
        ", which is not from macro invocation arguments."
  }

  /* Create a message to describe this macro, using '$@' to describe an example `ResultElement`. */
  string getMessageVariedResultInAllExpansions(Macro m) {
    result =
      "Generic selection in macro " + m.getName() +
        " contains an invocation-dependent side effect which is not from macro invocation arguments, for example $@."
  }

  /**
   * Create a message to describe this macro expansion which produces a `ResultElement`, using '$@'
   * to describe the relevant macro.
   */
  string getMessageResultInIsolatedExpansion(GenericWithNonMacroSideEffect element) {
    // A result in an isolated expansion indicates that the side effect is not always present when
    // macro is expanded, and therefore the side-effect is not in the macro definition but rather
    // originates in one of the macro arguments.
    none()
  }

  /**
   * Create a message to describe a `ResultElement` which is not generated by a macro expansion.
   */
  string getMessageNotInMacro(
    GenericWithNonMacroSideEffect element, Locatable optLoc1, string optStr1
  ) {
    // Generics which are not expanded from a macro aren't applicable to this rule.
    none()
  }
}

import DeduplicateMacroResults<GenericWithNonMacroSideEffect, GenericSideEffectConfig> as Deduplicate
import Deduplicate::Report<GenericSideEffectReportConfig> as Report

from Report::ReportResult res
where
  not isExcluded(res.getPrimaryElement(),
    GenericsPackage::genericSelectionNotFromMacroWithSideEffectsQuery())
select res.getPrimaryElement(), res.getMessage(), res.getOptionalPlaceholderLocatable(),
  res.getOptionalPlaceholderMessage()
